name: Cold Email Sync

# Automated pipeline to sync leads from BigQuery to Instantly.ai

on:
  schedule:
    # Run every 30 minutes during business hours (9 AM - 6 PM EST, Mon-Fri)
    - cron: '*/30 13-23 * * 1-5'  # UTC times for EST business hours
    # Also run every 2 hours on weekends (lighter schedule)  
    - cron: '0 */2 * * 0,6'
  workflow_dispatch:  # Allow manual triggers
    inputs:
      dry_run:
        description: 'Run in dry mode (no actual changes)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      target_leads:
        description: 'Number of new leads to process'
        required: false
        default: '100'

permissions:
  contents: read

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          # Install from requirements.txt to ensure all dependencies are included
          if [ -f requirements.txt ]; then
            echo "üì¶ Installing from requirements.txt..."
            pip install -r requirements.txt
          else
            echo "‚ö†Ô∏è requirements.txt not found, installing minimal dependencies..."
            pip install google-cloud-bigquery requests tenacity
          fi
      
      - name: Create credentials file
        run: |
          # Create directory structure
          mkdir -p config/secrets
          
          # Debug: Check if secrets are available (without exposing them)
          echo "üîç Checking secrets availability..."
          if [ -n "${{ secrets.BIGQUERY_CREDENTIALS_JSON }}" ]; then
            echo "‚úÖ BIGQUERY_CREDENTIALS_JSON secret is available"
          else
            echo "‚ùå ERROR: BIGQUERY_CREDENTIALS_JSON secret not set"
            exit 1
          fi
          
          if [ -n "${{ secrets.INSTANTLY_API_KEY }}" ]; then
            echo "‚úÖ INSTANTLY_API_KEY secret is available" 
          else
            echo "‚ùå ERROR: INSTANTLY_API_KEY secret not set"
            exit 1
          fi
          
          # Create credentials file
          echo "üìù Creating credentials file..."
          echo '${{ secrets.BIGQUERY_CREDENTIALS_JSON }}' > config/secrets/bigquery-credentials.json
          chmod 600 config/secrets/bigquery-credentials.json
          
          # Verify file was created
          if [ -f "config/secrets/bigquery-credentials.json" ]; then
            file_size=$(stat -c%s "config/secrets/bigquery-credentials.json" 2>/dev/null || stat -f%z "config/secrets/bigquery-credentials.json" 2>/dev/null || echo "unknown")
            echo "‚úÖ Credentials file created successfully ($file_size bytes)"
          else
            echo "‚ùå ERROR: Failed to create credentials file"
            exit 1
          fi
      
      - name: Debug Python environment
        run: |
          echo "üêç Python version:"
          python --version
          echo ""
          echo "üì¶ Installed packages:"
          pip list
          echo ""
          echo "üìÅ Current directory contents:"
          ls -la
          echo ""
          echo "üìÇ Config directory:"
          ls -la config/secrets/ || echo "config/secrets not found"
          
      - name: Validate environment
        run: |
          echo "üîç Validating GitHub Actions environment..."
          python validate_environment.py || {
            echo "‚ùå Environment validation failed with exit code $?"
            exit 1
          }
          
      - name: Test imports
        run: |
          echo "üß™ Testing Python imports..."
          python -c "import os; print('‚úÖ os module OK')"
          python -c "import logging; print('‚úÖ logging module OK')"
          python -c "from google.cloud import bigquery; print('‚úÖ google.cloud.bigquery OK')" || echo "‚ùå Failed to import bigquery"
          python -c "import requests; print('‚úÖ requests OK')" || echo "‚ùå Failed to import requests"
          python -c "import tenacity; print('‚úÖ tenacity OK')" || echo "‚ùå Failed to import tenacity"
          
      - name: Run minimal test
        run: |
          echo "üß™ Running minimal test..."
          python test_minimal.py || {
            echo "‚ùå Minimal test failed"
            echo "üìÑ Test log contents:"
            cat test.log || echo "No test.log file found"
            exit 1
          }
          
      - name: Run sync
        env:
          # Required secrets
          INSTANTLY_API_KEY: ${{ secrets.INSTANTLY_API_KEY }}
          
          # Configuration
          TARGET_NEW_LEADS_PER_RUN: ${{ github.event.inputs.target_leads || '100' }}
          INSTANTLY_CAP_GUARD: '24000'
          BATCH_SIZE: '50'  # Conservative for startup
          BATCH_SLEEP_SECONDS: '10'
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
          
          # Python path
          PYTHONPATH: .
        
        run: |
          echo "üöÄ Starting Cold Email Sync"
          echo "Target leads: $TARGET_NEW_LEADS_PER_RUN"
          echo "Dry run: $DRY_RUN"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          
          # Ensure we have the API key
          if [ -z "$INSTANTLY_API_KEY" ]; then
            echo "‚ùå INSTANTLY_API_KEY not available in environment"
            exit 1
          fi
          
          echo "‚úÖ Environment variables validated"
          
          # Run the sync script
          python sync_once.py || {
            exit_code=$?
            echo "‚ùå sync_once.py failed with exit code $exit_code"
            
            # If sync fails, try debug script
            echo "üîç Running debug script..."
            python debug_sync.py || echo "Debug script also failed"
            
            # List any log files created
            echo "üìÑ Log files in directory:"
            ls -la *.log || echo "No .log files found"
            
            exit $exit_code
          }
      
      - name: Cleanup credentials
        if: always()
        run: |
          rm -f config/secrets/bigquery-credentials.json
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-logs-${{ github.run_number }}
          path: |
            *.log
            cold-email-sync.log
            test.log
          if-no-files-found: warn
          retention-days: 7